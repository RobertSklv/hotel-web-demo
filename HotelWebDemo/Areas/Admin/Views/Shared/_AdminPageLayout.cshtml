@using HotelWebDemo.Extensions
@using HotelWebDemo.Models.Components.Admin.Pages
@using HotelWebDemo.Models.Components.Common
@using Newtonsoft.Json

@{
    Layout = "_AdminLayout";
    List<PageActionButton>? actions = ViewData["PageActions"] as List<PageActionButton>;
    SidebarLinkGroup? sidebarLinks = ViewData["SidebarLinks"] as SidebarLinkGroup;
    actions?.Sort((a1, a2) => a1.SortOrder - a2.SortOrder);
    List<Message>? messages = TempData.Get<List<Message>>("Messages") ?? new();
}

<h1 class="mt-4 mb-5">
    @ViewData["PageHeading"]
</h1>

@if (ViewData["PageSubHeading"] != null)
{
    <h2>
        @ViewData["PageSubHeading"]
    </h2>
}

<partial name="_Messages" model="@messages" />

<div class="actions mb-4 d-flex justify-content-end gap-3 bg-body-tertiary p-3 border-bottom border-top">
    @if (actions != null)
    {
        foreach (PageActionButton action in actions)
        {
            <partial name="_PageActionButton" model="@action" />
        }
    }
</div>

<div class="row">
    @if (sidebarLinks != null && sidebarLinks.Any())
    {
        <div class="col-2">
            <div class="list-group">
                @foreach (SidebarLink link in sidebarLinks)
                {
                    <a asp-area="@link.AreaName"
                       asp-controller="@link.ControllerName"
                       asp-action="@link.ActionName"
                       asp-all-route-data="@link.RequestParameters?.ToStringDictionary()"
                       class="list-group-item list-group-item-action @(sidebarLinks.IsActive(link.Id) ? "active" : "") @(link.Disabled ? "disabled" : "")">
                       @link.Content
                    </a>
                }
            </div>
        </div>
    }
    <div class="col">
        @RenderBody()
    </div>
</div>

@section ScriptsHead
{
    @await RenderSectionAsync("ScriptsHead", required: false)
}

@section Scripts
{
    @await RenderSectionAsync("Scripts", required: false)
}